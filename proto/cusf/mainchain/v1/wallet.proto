/* CUSF mainchain wallet service */

syntax = "proto3";
package cusf.mainchain.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

import "cusf/common/v1/common.proto";
import "cusf/mainchain/v1/common.proto";

message WalletTransaction {
  message Confirmation {
    uint32 height = 1;
    cusf.common.v1.ReverseHex block_hash = 2;
    google.protobuf.Timestamp timestamp = 3;
  }

  cusf.common.v1.ReverseHex txid = 1;

  uint64 fee_sats = 2;
  uint64 received_sats = 3;
  uint64 sent_sats = 4;

  Confirmation confirmation_info = 5;
}

service WalletService {
  rpc BroadcastWithdrawalBundle(BroadcastWithdrawalBundleRequest)
    returns (BroadcastWithdrawalBundleResponse);
  rpc CreateBmmCriticalDataTransaction(CreateBmmCriticalDataTransactionRequest)
    returns (CreateBmmCriticalDataTransactionResponse);
  rpc CreateDepositTransaction(CreateDepositTransactionRequest)
    returns (CreateDepositTransactionResponse);
  rpc CreateNewAddress(CreateNewAddressRequest)
    returns (CreateNewAddressResponse);
  // Create a new sidechain proposal (M1 in BIP300) and persist to the local
  // database for further processing.
  // Sidechain proposals must be included in the coinbase transaction of a
  // newly mined block, so this proposal is not active until the wallet has
  // been able to generate a new block.
  // Returns a stream of (non-)confirmation events for the sidechain proposal.
  rpc CreateSidechainProposal(CreateSidechainProposalRequest)
    returns (stream CreateSidechainProposalResponse);
  rpc GetBalance(GetBalanceRequest)
    returns (GetBalanceResponse);
  rpc ListTransactions(ListTransactionsRequest)
    returns (ListTransactionsResponse);
  // Regtest only
  rpc GenerateBlocks(GenerateBlocksRequest)
    returns (GenerateBlocksResponse);
}

message BroadcastWithdrawalBundleRequest {
  google.protobuf.UInt32Value sidechain_id = 1;
  google.protobuf.BytesValue transaction = 2;
}
message BroadcastWithdrawalBundleResponse {
}

message CreateBmmCriticalDataTransactionRequest {
  google.protobuf.UInt32Value sidechain_id = 1;
  google.protobuf.UInt64Value value_sats = 2;
  google.protobuf.UInt32Value height = 3;
  cusf.common.v1.ConsensusHex critical_hash = 4;
  cusf.common.v1.ReverseHex prev_bytes = 5;
}
message CreateBmmCriticalDataTransactionResponse {
  cusf.common.v1.ReverseHex txid = 1;
}

message CreateDepositTransactionRequest {
  google.protobuf.UInt32Value sidechain_id = 1;
  cusf.common.v1.Hex address = 2;
  google.protobuf.UInt64Value value_sats = 3;
  google.protobuf.UInt64Value fee_sats = 4;
}
message CreateDepositTransactionResponse {
  cusf.common.v1.ReverseHex txid = 1;
}

message CreateNewAddressRequest {
}

message CreateNewAddressResponse {
  string address = 1;
}

message CreateSidechainProposalRequest {
  google.protobuf.UInt32Value sidechain_id = 1;
  SidechainDeclaration declaration = 2;
}

message CreateSidechainProposalResponse {
  message Confirmed {
    cusf.common.v1.ReverseHex block_hash = 1;
    google.protobuf.UInt32Value confirmations = 2;
    google.protobuf.UInt32Value height = 3;
    OutPoint outpoint = 4;
    cusf.common.v1.ReverseHex prev_block_hash = 5;
  }
  message NotConfirmed {
    cusf.common.v1.ReverseHex block_hash = 1;
    google.protobuf.UInt32Value height = 2;
    cusf.common.v1.ReverseHex prev_block_hash = 3;
  }
  oneof event {
    Confirmed confirmed = 1;
    NotConfirmed not_confirmed = 2;
  }
}

message GenerateBlocksRequest {
  // Number of blocks to generate. 
  google.protobuf.UInt32Value blocks = 1;

  // ACK all sidechain proposals, irregardless of if they are already 
  // in the wallet DB. 
  bool ack_all_proposals = 2;
}

message GenerateBlocksResponse {
}

message GetBalanceRequest {
}
message GetBalanceResponse {
  uint64 confirmed_sats = 1;
  uint64 pending_sats = 2;
}

message ListTransactionsRequest {
}
message ListTransactionsResponse {
  repeated WalletTransaction transactions = 1;
}

