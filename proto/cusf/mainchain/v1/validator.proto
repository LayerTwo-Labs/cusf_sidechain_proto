/* CUSF mainchain validator service */

syntax = "proto3";
package cusf.mainchain.v1;

import "google/protobuf/wrappers.proto";

import "cusf/mainchain/v1/common.proto";

message BlockHeaderInfo {
  ReverseHex block_hash = 1;
  ReverseHex prev_block_hash = 2;
  uint32 height = 3;
  // Total work as a uint256, little-endian
  ConsensusHex work = 4;
}

enum Network {
  NETWORK_UNSPECIFIED = 0;
  NETWORK_UNKNOWN = 1;
  NETWORK_MAINNET = 2;
  NETWORK_REGTEST = 3;
  NETWORK_SIGNET = 4;
  NETWORK_TESTNET = 5;
}

message OutPoint {
  ConsensusHex txid = 1;
  uint32 vout = 2;
}

message Output {
  ConsensusHex address = 2;
  uint64 value_sats = 3;
}

message Deposit {
  uint64 sequence_number = 1;
  OutPoint outpoint = 2;
  Output output = 3;
}

enum WithdrawalBundleEventType {
  WITHDRAWAL_BUNDLE_EVENT_TYPE_UNSPECIFIED = 0;
  WITHDRAWAL_BUNDLE_EVENT_TYPE_SUBMITTED = 1;
  WITHDRAWAL_BUNDLE_EVENT_TYPE_FAILED = 2;
  WITHDRAWAL_BUNDLE_EVENT_TYPE_SUCCEDED = 3;
}

message WithdrawalBundleEvent {
  ConsensusHex m6id = 1;
  WithdrawalBundleEventType withdrawal_bundle_event_type = 2;
}

// Specific to an individual sidechain slot
message BlockInfo {
  repeated Deposit deposits = 1;
  repeated WithdrawalBundleEvent withdrawal_bundle_events = 2;
  optional ConsensusHex bmm_commitment = 3;
}

message SidechainDeclarationV0 {
  google.protobuf.StringValue title = 1;
  google.protobuf.StringValue description = 2;
  ConsensusHex hash_id_1 = 3;
  ConsensusHex hash_id_2 = 4;
}

message SidechainDeclaration {
  oneof version {
    SidechainDeclarationV0 v0 = 1;
  }
}

service ValidatorService {
  rpc GetBlockHeaderInfo(GetBlockHeaderInfoRequest)
    returns (GetBlockHeaderInfoResponse);
  rpc GetBlockInfo(GetBlockInfoRequest) returns (GetBlockInfoResponse);
  rpc GetBmmHStarCommitment(GetBmmHStarCommitmentRequest)
    returns (GetBmmHStarCommitmentResponse);
  rpc GetChainInfo(GetChainInfoRequest) returns (GetChainInfoResponse);
  rpc GetChainTip(GetChainTipRequest) returns (GetChainTipResponse);
  rpc GetCoinbasePSBT(GetCoinbasePSBTRequest) returns (GetCoinbasePSBTResponse);
  rpc GetCtip(GetCtipRequest) returns (GetCtipResponse);
  rpc GetSidechainProposals(GetSidechainProposalsRequest)
      returns (GetSidechainProposalsResponse);
  rpc GetSidechains(GetSidechainsRequest) returns (GetSidechainsResponse);
  rpc GetTwoWayPegData(GetTwoWayPegDataRequest)
    returns (GetTwoWayPegDataResponse);
  rpc SubscribeEvents(SubscribeEventsRequest)
    returns (stream SubscribeEventsResponse);
}

message GetBlockHeaderInfoRequest {
  ReverseHex block_hash = 1;
}
message GetBlockHeaderInfoResponse {
  BlockHeaderInfo header_info = 1;
}

message GetBlockInfoRequest {
  ReverseHex block_hash = 1;
  google.protobuf.UInt32Value sidechain_id = 2;
}
message GetBlockInfoResponse {
  BlockHeaderInfo header_info = 1;
  BlockInfo block_info = 2;
}

message GetBmmHStarCommitmentRequest {
  ReverseHex block_hash = 1;
  google.protobuf.UInt32Value sidechain_id = 2;
}
message GetBmmHStarCommitmentResponse {
  message BlockNotFoundError {
    ReverseHex block_hash = 1;
  }
  message Commitment {
    optional ConsensusHex commitment = 1;
  }
  oneof result {
    BlockNotFoundError block_not_found = 1;
    Commitment commitment = 2;
  }
}

message GetChainInfoRequest {
}
message GetChainInfoResponse {
  Network network = 1;
}

message GetChainTipRequest {
}
message GetChainTipResponse {
  BlockHeaderInfo block_header_info = 1;
}

message GetCoinbasePSBTRequest {
  message ProposeSidechain {
    google.protobuf.UInt32Value sidechain_number = 1;
    ConsensusHex data = 2;
  }
  message AckSidechain {
    google.protobuf.UInt32Value sidechain_number = 1;
    ConsensusHex data_hash = 2;
  }
  message ProposeBundle {
    google.protobuf.UInt32Value sidechain_number = 1;
    ConsensusHex bundle_txid = 2;
  }
  message AckBundles {
    message RepeatPrevious {
    }
    message LeadingBy50 {
    }
    message Upvotes {
      repeated uint32 upvotes = 1;
    }
    oneof ack_bundles {
      RepeatPrevious repeat_previous = 1;
      LeadingBy50 leading_by_50 = 2;
      Upvotes upvotes = 3;
    }
  }

  repeated ProposeSidechain propose_sidechains = 1;
  repeated AckSidechain ack_sidechains = 2;
  repeated ProposeBundle propose_bundles = 3;
  AckBundles ack_bundles = 4;
}
message GetCoinbasePSBTResponse {
  ConsensusHex psbt = 1;
}

message GetCtipRequest {
  google.protobuf.UInt32Value sidechain_number = 1;
}
message GetCtipResponse {
  message Ctip {
    ConsensusHex txid = 1;
    uint32 vout = 2;
    uint64 value = 3;
    uint64 sequence_number = 4;
  }
  optional Ctip ctip = 1;
}

message GetSidechainProposalsRequest {
}
message GetSidechainProposalsResponse {
  message SidechainProposal {
    uint32 sidechain_number = 1;

    // protolint:disable MAX_LINE_LENGTH

    // Raw sidechain proposal data (M1 message of BIP300)
    // https://github.com/bitcoin/bips/blob/master/bip-0300.mediawiki#m1----propose-sidechain
    google.protobuf.BytesValue data = 2;

    // protolint:enable MAX_LINE_LENGTH

    // Sidechain data, as declared in the M1 proposal.
    // Might be nil, if the proposal uses an unknown version.
    optional SidechainDeclaration declaration = 7;

    ConsensusHex data_hash = 3;
    uint32 vote_count = 4;
    uint32 proposal_height = 5;
    uint32 proposal_age = 6;
  }
  repeated SidechainProposal sidechain_proposals = 1;
}

message GetSidechainsRequest {
}
message GetSidechainsResponse {
  message SidechainInfo {
    uint32 sidechain_number = 1;
    google.protobuf.BytesValue data = 2;
    uint32 vote_count = 3;
    uint32 proposal_height = 4;
    uint32 activation_height = 5;
  }
  repeated SidechainInfo sidechains = 1;
}

message GetTwoWayPegDataRequest {
  google.protobuf.UInt32Value sidechain_id = 1;
  optional ReverseHex start_block_hash = 2;
  ReverseHex end_block_hash = 3;
}
message GetTwoWayPegDataResponse {
  message ResponseItem {
    BlockHeaderInfo block_header_info = 1;
    BlockInfo block_info = 2;
  }
  repeated ResponseItem blocks = 1;
}

message SubscribeEventsRequest {
  google.protobuf.UInt32Value sidechain_id = 1;
}
message SubscribeEventsResponse {
  message Event {
    message ConnectBlock {
      BlockHeaderInfo header_info = 1;
      BlockInfo block_info = 2;
    }
    message DisconnectBlock {
      ReverseHex block_hash = 1;
    }
    oneof event {
      ConnectBlock connect_block = 1;
      DisconnectBlock disconnect_block = 2;
    }
  }
  Event event = 1;
}
