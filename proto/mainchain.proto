/* CUSF mainchain node service */

syntax = "proto3";
package cusf.mainchain;

message BlockHeaderInfo {
  bytes block_hash = 1;
  bytes prev_block_hash = 2;
  uint32 height = 3;
  // Total work as a uint256, little-endian
  bytes work = 4;
}

message Deposit {
  uint64 sequence_number = 1;
  bytes address = 2;
  uint64 value = 3;
}

enum WithdrawalBundleEventType {
  WITHDRAWAL_BUNDLE_EVENT_TYPE_SUBMITTED_UNSPECIFIED = 0;
  WITHDRAWAL_BUNDLE_EVENT_TYPE_FAILED = 1;
  WITHDRAWAL_BUNDLE_EVENT_TYPE_SUCCEDED = 2;
}

message WithdrawalBundleEvent {
  bytes m6id = 1;
  WithdrawalBundleEventType withdrawal_bundle_event_type = 2;
}

message BlockInfo {
  repeated Deposit deposits = 1;
  optional WithdrawalBundleEvent withdrawal_bundle_event = 2;
  repeated bytes bmm_hashes = 3;
}

service Mainchain {
  rpc GetBlockHeaderInfo(GetBlockHeaderInfoRequest)
    returns (GetBlockHeaderInfoResponse);
  rpc GetBlockInfo(GetBlockInfoRequest) returns (GetBlockInfoResponse);
  rpc GetBmmHStarCommitments(GetBmmHStarCommitmentsRequest)
    returns (GetBmmHStarCommitmentsResponse);
  rpc GetChainTip(GetChainTipRequest) returns (GetChainTipResponse);
  rpc SubscribeEvents(SubscribeEventsRequest) returns (stream EventResponse);
}

message GetBlockHeaderInfoRequest {
  bytes block_hash = 1;
}
message GetBlockHeaderInfoResponse {
  BlockHeaderInfo header_info = 1;
}

message GetBlockInfoRequest {
  bytes block_hash = 1;
}
message GetBlockInfoResponse {
  BlockHeaderInfo header_info = 1;
  BlockInfo block_info = 2;
}

message GetBmmHStarCommitmentsRequest {
  bytes block_hash = 1;
  uint32 sidechain_id = 2;
}
message GetBmmHStarCommitmentsResponse {
  repeated bytes commitments = 1;
}

message GetChainTipRequest {
}
message GetChainTipResponse {
  BlockHeaderInfo block_header_info = 1;
}

message SubscribeEventsRequest {
}
message EventResponse {
  message Event {
    message ConnectBlock {
      BlockHeaderInfo header_info = 1;
      BlockInfo block_info = 2;
    }
    message DisconnectBlock {
      bytes block_hash = 1;
    }
    oneof event {
      ConnectBlock connect_block = 1;
      DisconnectBlock disconnect_block = 2;
    }
  }
  Event event = 1;
}
