/* CUSF mainchain node service */

syntax = "proto3";
package cusf.mainchain;

enum AddressType {
  ADDRESS_TYPE_UNSPECIFIED = 0;
  ADDRESS_TYPE_DEFAULT = 1;
  ADDRESS_TYPE_BECH32 = 2;
  ADDRESS_TYPE_LEGACY = 3;
  ADDRESS_TYPE_P2SH_SEGWIT = 4;
}

message BlockHeaderInfo {
  bytes block_hash = 1;
  bytes prev_block_hash = 2;
  uint32 height = 3;
  // Total work as a uint256, little-endian
  bytes work = 4;
}

enum Network {
  NETWORK_UNSPECIFIED = 0;
  NETWORK_MAINNET = 1;
  NETWORK_REGTEST = 2;
  NETWORK_SIGNET = 3;
  NETWORK_TESTNET = 4;
}

message OutPoint {
  bytes txid = 1;
  uint32 vout = 2;
}

message Output {
  bytes address = 2;
  uint64 value_sats = 3;
}

message Deposit {
  uint64 sequence_number = 1;
  OutPoint outpoint = 2;
  Output output = 3;
}

enum WithdrawalBundleEventType {
  WITHDRAWAL_BUNDLE_EVENT_TYPE_SUBMITTED_UNSPECIFIED = 0;
  WITHDRAWAL_BUNDLE_EVENT_TYPE_FAILED = 1;
  WITHDRAWAL_BUNDLE_EVENT_TYPE_SUCCEDED = 2;
}

message WithdrawalBundleEvent {
  bytes m6id = 1;
  WithdrawalBundleEventType withdrawal_bundle_event_type = 2;
}

// Specific to an individual sidechain slot
message BlockInfo {
  repeated Deposit deposits = 1;
  optional WithdrawalBundleEvent withdrawal_bundle_event = 2;
  optional bytes bmm_commitment = 3;
}

service Mainchain {
  rpc BroadcastWithdrawalBundle(BroadcastWithdrawalBundleRequest)
    returns (BroadcastWithdrawalBundleResponse);
  rpc CreateBmmCriticalDataTransaction(CreateBmmCriticalDataTransactionRequest)
    returns (CreateBmmCriticalDataTransactionResponse);
  rpc CreateDepositTransaction(CreateDepositTransactionRequest)
    returns (CreateDepositTransactionResponse);
  rpc CreateNewAddress(CreateNewAddressRequest)
    returns (CreateNewAddressResponse);
  // Regtest only
  rpc GenerateBlocks(GenerateBlocksRequest)
    returns (GenerateBlocksResponse);
  rpc GetBlockHeaderInfo(GetBlockHeaderInfoRequest)
    returns (GetBlockHeaderInfoResponse);
  rpc GetBlockInfo(GetBlockInfoRequest) returns (GetBlockInfoResponse);
  rpc GetBmmHStarCommitments(GetBmmHStarCommitmentsRequest)
    returns (GetBmmHStarCommitmentsResponse);
  rpc GetChainInfo(GetChainInfoRequest) returns (GetChainInfoResponse);
  rpc GetChainTip(GetChainTipRequest) returns (GetChainTipResponse);
  rpc GetTwoWayPegData(GetTwoWayPegDataRequest)
    returns (GetTwoWayPegDataResponse);
  rpc SubscribeEvents(SubscribeEventsRequest) returns (stream EventResponse);
}

message BroadcastWithdrawalBundleRequest {
  uint32 sidechain_id = 1;
  bytes transaction = 2;
}
message BroadcastWithdrawalBundleResponse {
}

message CreateBmmCriticalDataTransactionRequest {
  uint32 sidechain_id = 1;
  uint64 value_sats = 2;
  uint32 height = 3;
  bytes critical_hash = 4;
  bytes prev_bytes = 5;
}
message CreateBmmCriticalDataTransactionResponse {
  bytes txid = 1;
}

message CreateDepositTransactionRequest {
  uint32 sidechain_id = 1;
  string address = 2;
  uint64 value_sats = 3;
  uint64 fee_sats = 4;
}
message CreateDepositTransactionResponse {
  bytes txid = 1;
}

message CreateNewAddressRequest {
  optional string label = 1;
  AddressType address_type = 2;
}
message CreateNewAddressResponse {
  string address = 1;
}

message GenerateBlocksRequest {
  uint32 blocks = 1;
}
message GenerateBlocksResponse {
}

message GetBlockHeaderInfoRequest {
  bytes block_hash = 1;
}
message GetBlockHeaderInfoResponse {
  BlockHeaderInfo header_info = 1;
}

message GetBlockInfoRequest {
  bytes block_hash = 1;
  uint32 sidechain_id = 2;
}
message GetBlockInfoResponse {
  BlockHeaderInfo header_info = 1;
  BlockInfo block_info = 2;
}

message GetBmmHStarCommitmentsRequest {
  bytes block_hash = 1;
  uint32 sidechain_id = 2;
}
message GetBmmHStarCommitmentsResponse {
  message BlockNotFoundError {
    bytes block_hash = 1;
  }
  message Commitments {
    repeated bytes commitments = 1;
  }
  oneof result {
    BlockNotFoundError block_not_found = 1;
    Commitments commitments = 2;
  }
}

message GetChainInfoRequest {
}
message GetChainInfoResponse {
  Network network = 1;
}

message GetChainTipRequest {
}
message GetChainTipResponse {
  BlockHeaderInfo block_header_info = 1;
}

message GetTwoWayPegDataRequest {
  uint32 sidechain_id = 1;
  optional bytes start_block_hash = 2;
  bytes end_block_hash = 3;
}
message GetTwoWayPegDataResponse {
  message ResponseItem {
    BlockHeaderInfo block_header_info = 1;
    BlockInfo block_info = 2;
  }
  repeated ResponseItem blocks = 1;
}

message SubscribeEventsRequest {
  uint32 sidechain_id = 1;
}
message EventResponse {
  message Event {
    message ConnectBlock {
      BlockHeaderInfo header_info = 1;
      BlockInfo block_info = 2;
    }
    message DisconnectBlock {
      bytes block_hash = 1;
    }
    oneof event {
      ConnectBlock connect_block = 1;
      DisconnectBlock disconnect_block = 2;
    }
  }
  Event event = 1;
}
